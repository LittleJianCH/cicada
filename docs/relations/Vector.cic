datatype Vector(A: Type, length: Nat) {
  null: Vector(A, Nat.zero)
  implicit n: Nat
  cons(head: A, tail: Vector(A, n)): Vector(A, Nat.add1(n))
}

implicit A: Type
implicit m: Nat, n: Nat
Vector.append(x: Vector(A, m), y: Vector(A, n)): Vector(A, Nat.add(m, n))
Vector.append(Vector.null, y) = y
Vector.append(Vector.cons(head, tail), y) = Vector.cons(head, Vector.append(tail, y))

implicit A: Type, B: Type
implicit n: Nat
Vector.map(x: Vector(A, n), f(A): B): Vector(B, n)
Vector.map(Vector.null) = Vector.null
Vector.map(Vector.cons(head, tail)) = Vector.cons(f(head), Vector.map(tail, f))

Vector.three_zeros: Vector(Nat, Nat.three) =
  Vector.cons(Nat.zero, Vector.cons(Nat.zero, Vector.cons(Nat.zero, Vector.null)))

Vector.three_ones: Vector(Nat, Nat.three) =
  Vector.cons(Nat.one, Vector.cons(Nat.one, Vector.cons(Nat.one, Vector.null)))
