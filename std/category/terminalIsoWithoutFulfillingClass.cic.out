(cat, x, y) => {
  cat: {
    Object: cat.Object,
    Morphism: (dom, cod) => cat.Morphism(dom, cod),
    id: (x1) => cat.id(x1),
    compose: (implicit x1, implicit y1, implicit z, f, g) => cat.compose(implicit x1, implicit y1, implicit z, f, g),
    idLeft: (implicit x1, implicit y1, f) => cat.idLeft(implicit x1, implicit y1, f),
    idRight: (implicit x1, implicit y1, f) => cat.idRight(implicit x1, implicit y1, f),
    composeAssociative: (implicit x1, implicit y1, implicit z, implicit w, f, g, h) => cat.composeAssociative(implicit x1, implicit y1, implicit z, implicit w, f, g, h)
  },
  dom: x.object,
  cod: y.object,
  morphism: y.morphism(x.object),
  inverse: x.morphism(y.object),
  inverseLeft: replace(replace(x.morphismUnique(implicit x.object, cat.id(x.object)), (target) => Equal(cat.Morphism(x.object, x.object), target, cat.id(x.object)), refl(implicit cat.Morphism(x.object, x.object), implicit cat.id(x.object))), (target) => Equal(cat.Morphism(x.object, x.object), cat.compose(implicit x.object, implicit y.object, implicit x.object, y.morphism(x.object), x.morphism(y.object)), target), x.morphismUnique(implicit x.object, cat.compose(implicit x.object, implicit y.object, implicit x.object, y.morphism(x.object), x.morphism(y.object)))),
  inverseRight: replace(replace(y.morphismUnique(implicit y.object, cat.id(y.object)), (target) => Equal(cat.Morphism(y.object, y.object), target, cat.id(y.object)), refl(implicit cat.Morphism(y.object, y.object), implicit cat.id(y.object))), (target) => Equal(cat.Morphism(y.object, y.object), cat.compose(implicit y.object, implicit x.object, implicit y.object, x.morphism(y.object), y.morphism(x.object)), target), y.morphismUnique(implicit y.object, cat.compose(implicit y.object, implicit x.object, implicit y.object, x.morphism(y.object), y.morphism(x.object))))
}: (cat: class {
  Object: Type
  Morphism: (Object, Object) -> Type
  id: (x: Object) -> Morphism(x, x)
  compose: (implicit x: Object, implicit y: Object, implicit z: Object, Morphism(x, y), Morphism(y, z)) -> Morphism(x, z)
  idLeft: (implicit x: Object, implicit y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(implicit x, implicit x, implicit y, id(x), f), f)
  idRight: (implicit x: Object, implicit y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(implicit x, implicit y, implicit y, f, id(y)), f)
  composeAssociative: (implicit x: Object, implicit y: Object, implicit z: Object, implicit w: Object, f: Morphism(x, y), g: Morphism(y, z), h: Morphism(z, w)) -> Equal(Morphism(x, w), compose(implicit x, implicit y, implicit w, f, compose(implicit y, implicit y, implicit w, g, h)), compose(implicit x, implicit y, implicit w, compose(implicit x, implicit y, implicit y, f, g), h))
}, class {
  cat: class {
    Object: Type
    Morphism: (Object, Object) -> Type
    id: (x: Object) -> Morphism(x, x)
    compose: (implicit x: Object, implicit y: Object, implicit z: Object, Morphism(x, y), Morphism(y, z)) -> Morphism(x, z)
    idLeft: (implicit x: Object, implicit y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(implicit x, implicit x, implicit y, id(x), f), f)
    idRight: (implicit x: Object, implicit y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(implicit x, implicit y, implicit y, f, id(y)), f)
    composeAssociative: (implicit x: Object, implicit y: Object, implicit z: Object, implicit w: Object, f: Morphism(x, y), g: Morphism(y, z), h: Morphism(z, w)) -> Equal(Morphism(x, w), compose(implicit x, implicit y, implicit w, f, compose(implicit y, implicit y, implicit w, g, h)), compose(implicit x, implicit y, implicit w, compose(implicit x, implicit y, implicit y, f, g), h))
  } = {
    Object: cat.Object,
    Morphism: (dom, cod) => cat.Morphism(dom, cod),
    id: (x) => cat.id(x),
    compose: (implicit x, implicit y, implicit z, f, g) => cat.compose(implicit x, implicit y, implicit z, f, g),
    idLeft: (implicit x, implicit y, f) => cat.idLeft(implicit x, implicit y, f),
    idRight: (implicit x, implicit y, f) => cat.idRight(implicit x, implicit y, f),
    composeAssociative: (implicit x, implicit y, implicit z, implicit w, f, g, h) => cat.composeAssociative(implicit x, implicit y, implicit z, implicit w, f, g, h)
  }
  object: cat.Object
  morphism: (x: cat.Object) -> cat.Morphism(x, object)
  morphismUnique: (implicit x: cat.Object, f: cat.Morphism(x, object)) -> Equal(cat.Morphism(x, object), f, morphism(x))
}, class {
  cat: class {
    Object: Type
    Morphism: (Object, Object) -> Type
    id: (x1: Object) -> Morphism(x1, x1)
    compose: (implicit x1: Object, implicit y: Object, implicit z: Object, Morphism(x1, y), Morphism(y, z)) -> Morphism(x1, z)
    idLeft: (implicit x1: Object, implicit y: Object, f: Morphism(x1, y)) -> Equal(Morphism(x1, y), compose(implicit x1, implicit x1, implicit y, id(x1), f), f)
    idRight: (implicit x1: Object, implicit y: Object, f: Morphism(x1, y)) -> Equal(Morphism(x1, y), compose(implicit x1, implicit y, implicit y, f, id(y)), f)
    composeAssociative: (implicit x1: Object, implicit y: Object, implicit z: Object, implicit w: Object, f: Morphism(x1, y), g: Morphism(y, z), h: Morphism(z, w)) -> Equal(Morphism(x1, w), compose(implicit x1, implicit y, implicit w, f, compose(implicit y, implicit y, implicit w, g, h)), compose(implicit x1, implicit y, implicit w, compose(implicit x1, implicit y, implicit y, f, g), h))
  } = {
    Object: cat.Object,
    Morphism: (dom, cod) => cat.Morphism(dom, cod),
    id: (x1) => cat.id(x1),
    compose: (implicit x1, implicit y, implicit z, f, g) => cat.compose(implicit x1, implicit y, implicit z, f, g),
    idLeft: (implicit x1, implicit y, f) => cat.idLeft(implicit x1, implicit y, f),
    idRight: (implicit x1, implicit y, f) => cat.idRight(implicit x1, implicit y, f),
    composeAssociative: (implicit x1, implicit y, implicit z, implicit w, f, g, h) => cat.composeAssociative(implicit x1, implicit y, implicit z, implicit w, f, g, h)
  }
  object: cat.Object
  morphism: (x1: cat.Object) -> cat.Morphism(x1, object)
  morphismUnique: (implicit x1: cat.Object, f: cat.Morphism(x1, object)) -> Equal(cat.Morphism(x1, object), f, morphism(x1))
}) -> class {
  cat [rename: cat1]: class {
    Object: Type
    Morphism: (Object, Object) -> Type
    id: (x1: Object) -> Morphism(x1, x1)
    compose: (implicit x1: Object, implicit y1: Object, implicit z: Object, Morphism(x1, y1), Morphism(y1, z)) -> Morphism(x1, z)
    idLeft: (implicit x1: Object, implicit y1: Object, f: Morphism(x1, y1)) -> Equal(Morphism(x1, y1), compose(implicit x1, implicit x1, implicit y1, id(x1), f), f)
    idRight: (implicit x1: Object, implicit y1: Object, f: Morphism(x1, y1)) -> Equal(Morphism(x1, y1), compose(implicit x1, implicit y1, implicit y1, f, id(y1)), f)
    composeAssociative: (implicit x1: Object, implicit y1: Object, implicit z: Object, implicit w: Object, f: Morphism(x1, y1), g: Morphism(y1, z), h: Morphism(z, w)) -> Equal(Morphism(x1, w), compose(implicit x1, implicit y1, implicit w, f, compose(implicit y1, implicit y1, implicit w, g, h)), compose(implicit x1, implicit y1, implicit w, compose(implicit x1, implicit y1, implicit y1, f, g), h))
  }
  dom: cat1.Object
  cod: cat1.Object
  morphism: cat1.Morphism(dom, cod)
  inverse: cat1.Morphism(cod, dom)
  inverseLeft: Equal(cat1.Morphism(dom, dom), cat1.compose(implicit dom, implicit cod, implicit dom, morphism, inverse), cat1.id(dom))
  inverseRight: Equal(cat1.Morphism(cod, cod), cat1.compose(implicit cod, implicit dom, implicit cod, inverse, morphism), cat1.id(cod))
}
(x, y) => {
  cat: {
    Object: Trivial,
    Morphism: (dom, cod) => Trivial,
    id: (x1) => sole,
    compose: (implicit x1, implicit y1, implicit z, f, g) => sole,
    idLeft: (implicit x1, implicit y1, f) => refl(implicit Trivial, implicit sole),
    idRight: (implicit x1, implicit y1, f) => refl(implicit Trivial, implicit sole),
    composeAssociative: (implicit x1, implicit y1, implicit z, implicit w, f, g, h) => refl(implicit Trivial, implicit sole)
  },
  dom: sole,
  cod: sole,
  morphism: sole,
  inverse: sole,
  inverseLeft: replace(replace(x.morphismUnique(implicit sole, sole), (target) => Equal(Trivial, sole, sole), refl(implicit Trivial, implicit sole)), (target) => Equal(Trivial, sole, sole), x.morphismUnique(implicit sole, sole)),
  inverseRight: replace(replace(y.morphismUnique(implicit sole, sole), (target) => Equal(Trivial, sole, sole), refl(implicit Trivial, implicit sole)), (target) => Equal(Trivial, sole, sole), y.morphismUnique(implicit sole, sole))
}: (class {
  cat: class {
    Object: Type
    Morphism: (Object, Object) -> Type
    id: (x: Object) -> Morphism(x, x)
    compose: (implicit x: Object, implicit y: Object, implicit z: Object, Morphism(x, y), Morphism(y, z)) -> Morphism(x, z)
    idLeft: (implicit x: Object, implicit y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(implicit x, implicit x, implicit y, id(x), f), f)
    idRight: (implicit x: Object, implicit y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(implicit x, implicit y, implicit y, f, id(y)), f)
    composeAssociative: (implicit x: Object, implicit y: Object, implicit z: Object, implicit w: Object, f: Morphism(x, y), g: Morphism(y, z), h: Morphism(z, w)) -> Equal(Morphism(x, w), compose(implicit x, implicit y, implicit w, f, compose(implicit y, implicit y, implicit w, g, h)), compose(implicit x, implicit y, implicit w, compose(implicit x, implicit y, implicit y, f, g), h))
  } = {
    Object: Trivial,
    Morphism: (dom, cod) => Trivial,
    id: (x) => sole,
    compose: (implicit x, implicit y, implicit z, f, g) => sole,
    idLeft: (implicit x, implicit y, f) => refl(implicit Trivial, implicit sole),
    idRight: (implicit x, implicit y, f) => refl(implicit Trivial, implicit sole),
    composeAssociative: (implicit x, implicit y, implicit z, implicit w, f, g, h) => refl(implicit Trivial, implicit sole)
  }
  object: Trivial
  morphism: (Trivial) -> Trivial
  morphismUnique: (implicit x: Trivial, Trivial) -> Equal(Trivial, sole, sole)
}, class {
  cat: class {
    Object: Type
    Morphism: (Object, Object) -> Type
    id: (x1: Object) -> Morphism(x1, x1)
    compose: (implicit x1: Object, implicit y: Object, implicit z: Object, Morphism(x1, y), Morphism(y, z)) -> Morphism(x1, z)
    idLeft: (implicit x1: Object, implicit y: Object, f: Morphism(x1, y)) -> Equal(Morphism(x1, y), compose(implicit x1, implicit x1, implicit y, id(x1), f), f)
    idRight: (implicit x1: Object, implicit y: Object, f: Morphism(x1, y)) -> Equal(Morphism(x1, y), compose(implicit x1, implicit y, implicit y, f, id(y)), f)
    composeAssociative: (implicit x1: Object, implicit y: Object, implicit z: Object, implicit w: Object, f: Morphism(x1, y), g: Morphism(y, z), h: Morphism(z, w)) -> Equal(Morphism(x1, w), compose(implicit x1, implicit y, implicit w, f, compose(implicit y, implicit y, implicit w, g, h)), compose(implicit x1, implicit y, implicit w, compose(implicit x1, implicit y, implicit y, f, g), h))
  } = {
    Object: Trivial,
    Morphism: (dom, cod) => Trivial,
    id: (x1) => sole,
    compose: (implicit x1, implicit y, implicit z, f, g) => sole,
    idLeft: (implicit x1, implicit y, f) => refl(implicit Trivial, implicit sole),
    idRight: (implicit x1, implicit y, f) => refl(implicit Trivial, implicit sole),
    composeAssociative: (implicit x1, implicit y, implicit z, implicit w, f, g, h) => refl(implicit Trivial, implicit sole)
  }
  object: Trivial
  morphism: (Trivial) -> Trivial
  morphismUnique: (implicit x1: Trivial, Trivial) -> Equal(Trivial, sole, sole)
}) -> class {
  cat: class {
    Object: Type
    Morphism: (Object, Object) -> Type
    id: (x1: Object) -> Morphism(x1, x1)
    compose: (implicit x1: Object, implicit y1: Object, implicit z: Object, Morphism(x1, y1), Morphism(y1, z)) -> Morphism(x1, z)
    idLeft: (implicit x1: Object, implicit y1: Object, f: Morphism(x1, y1)) -> Equal(Morphism(x1, y1), compose(implicit x1, implicit x1, implicit y1, id(x1), f), f)
    idRight: (implicit x1: Object, implicit y1: Object, f: Morphism(x1, y1)) -> Equal(Morphism(x1, y1), compose(implicit x1, implicit y1, implicit y1, f, id(y1)), f)
    composeAssociative: (implicit x1: Object, implicit y1: Object, implicit z: Object, implicit w: Object, f: Morphism(x1, y1), g: Morphism(y1, z), h: Morphism(z, w)) -> Equal(Morphism(x1, w), compose(implicit x1, implicit y1, implicit w, f, compose(implicit y1, implicit y1, implicit w, g, h)), compose(implicit x1, implicit y1, implicit w, compose(implicit x1, implicit y1, implicit y1, f, g), h))
  }
  dom: cat.Object
  cod: cat.Object
  morphism: cat.Morphism(dom, cod)
  inverse: cat.Morphism(cod, dom)
  inverseLeft: Equal(cat.Morphism(dom, dom), cat.compose(implicit dom, implicit cod, implicit dom, morphism, inverse), cat.id(dom))
  inverseRight: Equal(cat.Morphism(cod, cod), cat.compose(implicit cod, implicit dom, implicit cod, inverse, morphism), cat.id(cod))
}
