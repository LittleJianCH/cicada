{
  cat: {
    Object: Trivial,
    Morphism: (dom, cod) => Trivial,
    id: (x) => sole,
    compose: (implicit x, implicit y, implicit z, f, g) => sole,
    idLeft: (implicit x, implicit y, f) => refl(implicit Trivial, implicit sole),
    idRight: (implicit x, implicit y, f) => refl(implicit Trivial, implicit sole),
    composeAssociative: (implicit x, implicit y, implicit z, implicit w, f, g, h) => refl(implicit Trivial, implicit sole)
  },
  dom: sole,
  cod: sole,
  morphism: sole,
  inverse: sole,
  inverseLeft: refl(implicit Trivial, implicit sole),
  inverseRight: refl(implicit Trivial, implicit sole)
}: class {
  cat: class {
    Object: Type
    Morphism: (Object, Object) -> Type
    id: (x: Object) -> Morphism(x, x)
    compose: (implicit x: Object, implicit y: Object, implicit z: Object, Morphism(x, y), Morphism(y, z)) -> Morphism(x, z)
    idLeft: (implicit x: Object, implicit y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(implicit x, implicit x, implicit y, id(x), f), f)
    idRight: (implicit x: Object, implicit y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(implicit x, implicit y, implicit y, f, id(y)), f)
    composeAssociative: (implicit x: Object, implicit y: Object, implicit z: Object, implicit w: Object, f: Morphism(x, y), g: Morphism(y, z), h: Morphism(z, w)) -> Equal(Morphism(x, w), compose(implicit x, implicit y, implicit w, f, compose(implicit y, implicit y, implicit w, g, h)), compose(implicit x, implicit y, implicit w, compose(implicit x, implicit y, implicit y, f, g), h))
  } = {
    Object: Trivial,
    Morphism: (dom, cod) => Trivial,
    id: (x) => sole,
    compose: (implicit x, implicit y, implicit z, f, g) => sole,
    idLeft: (implicit x, implicit y, f) => refl(implicit Trivial, implicit sole),
    idRight: (implicit x, implicit y, f) => refl(implicit Trivial, implicit sole),
    composeAssociative: (implicit x, implicit y, implicit z, implicit w, f, g, h) => refl(implicit Trivial, implicit sole)
  }
  dom: Trivial = sole
  cod: Trivial = sole
  morphism: Trivial = sole
  inverse: Trivial = sole
  inverseLeft: Equal(Trivial, sole, sole)
  inverseRight: Equal(Trivial, sole, sole)
}
{
  Object: Trivial,
  Morphism: (dom, cod) => Trivial,
  id: (x) => sole,
  compose: (implicit x, implicit y, implicit z, f, g) => sole,
  idLeft: (implicit x, implicit y, f) => refl(implicit Trivial, implicit sole),
  idRight: (implicit x, implicit y, f) => refl(implicit Trivial, implicit sole),
  composeAssociative: (implicit x, implicit y, implicit z, implicit w, f, g, h) => refl(implicit Trivial, implicit sole),
  inverse: (implicit x, implicit y, f) => sole,
  inverseIso: (implicit x, implicit y, f) => {
    cat: {
      Object: Trivial,
      Morphism: (dom, cod) => Trivial,
      id: (x1) => sole,
      compose: (implicit x1, implicit y1, implicit z, f1, g) => sole,
      idLeft: (implicit x1, implicit y1, f1) => refl(implicit Trivial, implicit sole),
      idRight: (implicit x1, implicit y1, f1) => refl(implicit Trivial, implicit sole),
      composeAssociative: (implicit x1, implicit y1, implicit z, implicit w, f1, g, h) => refl(implicit Trivial, implicit sole)
    },
    dom: sole,
    cod: sole,
    morphism: sole,
    inverse: sole,
    inverseLeft: refl(implicit Trivial, implicit sole),
    inverseRight: refl(implicit Trivial, implicit sole)
  }
}: class {
  Object: Type
  Morphism: (Object, Object) -> Type
  id: (x: Object) -> Morphism(x, x)
  compose: (implicit x: Object, implicit y: Object, implicit z: Object, Morphism(x, y), Morphism(y, z)) -> Morphism(x, z)
  idLeft: (implicit x: Object, implicit y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(implicit x, implicit x, implicit y, id(x), f), f)
  idRight: (implicit x: Object, implicit y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(implicit x, implicit y, implicit y, f, id(y)), f)
  composeAssociative: (implicit x: Object, implicit y: Object, implicit z: Object, implicit w: Object, f: Morphism(x, y), g: Morphism(y, z), h: Morphism(z, w)) -> Equal(Morphism(x, w), compose(implicit x, implicit y, implicit w, f, compose(implicit y, implicit y, implicit w, g, h)), compose(implicit x, implicit y, implicit w, compose(implicit x, implicit y, implicit y, f, g), h))
  inverse: (implicit x: Object, implicit y: Object, Morphism(x, y)) -> Morphism(y, x)
  inverseIso: (implicit x: Object, implicit y: Object, f: Morphism(x, y)) -> class {
    cat: class {
      Object: Type
      Morphism: (Object1, Object1) -> Type
      id: (x1: Object1) -> Morphism1(x1, x1)
      compose: (implicit x1: Object1, implicit y1: Object1, implicit z: Object1, Morphism1(x1, y1), Morphism1(y1, z)) -> Morphism1(x1, z)
      idLeft: (implicit x1: Object1, implicit y1: Object1, f1: Morphism1(x1, y1)) -> Equal(Morphism1(x1, y1), compose1(implicit x, implicit x, implicit y, id1(x1), f1), f1)
      idRight: (implicit x1: Object1, implicit y1: Object1, f1: Morphism1(x1, y1)) -> Equal(Morphism1(x1, y1), compose1(implicit x, implicit y, implicit y, f1, id1(y1)), f1)
      composeAssociative: (implicit x1: Object1, implicit y1: Object1, implicit z: Object1, implicit w: Object1, f1: Morphism1(x1, y1), g: Morphism1(y1, z), h: Morphism1(z, w)) -> Equal(Morphism1(x1, w), compose1(implicit x, implicit y, implicit w, f1, compose1(implicit y, implicit y, implicit w, g, h)), compose1(implicit x, implicit y, implicit w, compose1(implicit x, implicit y, implicit y, f1, g), h))
    } = {
      Object: Object,
      Morphism: (dom, cod) => Morphism(dom, cod),
      id: (x1) => id(x1),
      compose: (implicit x1, implicit y1, implicit z, f1, g) => compose(implicit x1, implicit y1, implicit z, f1, g),
      idLeft: (implicit x1, implicit y1, f1) => idLeft(implicit x1, implicit y1, f1),
      idRight: (implicit x1, implicit y1, f1) => idRight(implicit x1, implicit y1, f1),
      composeAssociative: (implicit x1, implicit y1, implicit z, implicit w, f1, g, h) => composeAssociative(implicit x1, implicit y1, implicit z, implicit w, f1, g, h)
    }
    dom: Object = x
    cod: Object = y
    morphism: Morphism(x, y) = f
    inverse: Morphism(y, x) = inverse(implicit x, implicit y, f)
    inverseLeft: Equal(Morphism(x, x), compose(implicit dom, implicit cod, implicit dom, f, inverse(implicit x, implicit y, f)), id(x))
    inverseRight: Equal(Morphism(y, y), compose(implicit cod, implicit dom, implicit cod, inverse(implicit x, implicit y, f), f), id(y))
  }
}
